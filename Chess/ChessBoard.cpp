#include "stdafx.h"
#include "ChessBoard.h"

//生成随机数产生器
std::default_random_engine generator((unsigned long)time(NULL));

// ====== MyBoard类部分
MyBoard::MyBoard()
	:_board(_size,std::vector<Status>(_size,blank)),
	HashOfB(_size, std::vector<U64>(_size, 0)),
	HashOfW(_size, std::vector<U64>(_size, 0))
{
	//生成随机数产生器
	/*std::uniform_int_distribution<U64> dis(0, _UI64_MAX);
	auto dice= std::bind(dis,generator);
	
	std::map<U64, int> repeat;

	for (int i = 0; i < _size; ++i)
		for (int j = 0; j < _size; ++j)
		{
			U64 tmp;
			while (repeat[tmp = dice()] != 0);
			repeat[tmp] = 1;
			HashOfB[i][j] = tmp;
			while (repeat[tmp = dice()] != 0);
			repeat[tmp] = 1;
			HashOfW[i][j] = tmp;
		}

	std::ofstream out("arr.txt");
	for(int i=0;i<_size;++i)
	{	
		out<<"{ ";
		for(int j=0;j<_size-1;++j)	
			out<<HashOfB[i][j]<<", ";
		out<<HashOfB[i][_size-1];
		out<<" },\r\n";
	}	
	out<<"\r\n";
	for(int i=0;i<_size;++i)
	{	
		out<<"{ ";
		for(int j=0;j<_size-1;++j)	
			out<<HashOfW[i][j]<<", ";
		out<<HashOfW[i][_size-1];
		out<<" },\r\n";
	}
	out<<"\r\n";
	out.close();*/

	U64 tmpB[15][15] =
	{
{ 7413048823443881984, 5425296422226362368, 3944848446862655488, 239475904567312384, 792713420808912896, 1534981080631738368, 6509372010554982400, 41979422667964416, 1016151286132768768, 8157165986378678272, 6479434993285201920, 2950798212031578112, 8160789482782588928, 2810193201942495232, 1995889096500707328 },
{ 6446457912263966720, 458986589234659328, 9118056290545827840, 2099235656139014144, 7082959962313326592, 6860616746714267648, 4359219341028229120, 2123205572265246720, 1268591188705804288, 2371002550766796800, 2421090558156996608, 8333189422799388672, 695680948427030528, 8235399086258257920, 7849493873825939456 },
{ 1848873542779666432, 7250140000942030848, 2923875896731369472, 6658241736017444864, 4315366707028819968, 5912268056289083392, 1149555031930830848, 144448821135409152, 7036880125777936384, 751544028972974080, 6045279276436029440, 8769883409485922304, 2597657965070647296, 4876561028143382528, 2729234339723214848 },
{ 3899861791173246976, 9092557039644704768, 913329996699795456, 2286289633727741952, 7685807619293839360, 3527094200799592448, 9099844873296543744, 7677155734093561856, 1091273987876454400, 2723676969869770752, 9118471480739364864, 2604730449062264832, 2673242186820091904, 7507831785229647872, 3996085834745905152 },
{ 2948774449211506688, 6375064573573070848, 5069162321067114496, 3802888215677894656, 642192404975190016, 8911458850255667200, 3715144932923539456, 2890891192143183872, 1352096730308411392, 7196949291997331456, 7417243876915675136, 3134111779911630848, 2365350799007023104, 7493914553592315904, 254745355118182400 },
{ 6945757274992279552, 2811199250786942976, 509068089749405696, 3191830492487876608, 2713124784979312640, 7666981961591685120, 5625741137181409280, 8128472765868015616, 2271778025861283840, 2471046091575918592, 3434819194972012544, 2007412566770319360, 5038936497311449088, 2667813034625335296, 5564034276887887872 },
{ 2720279500414779392, 1750381112229625856, 600303919649783808, 7449520014979235840, 4191401164748619776, 7363292834205532160, 2959909293660307456, 8907456477606707200, 2010162681574588416, 8962596418803990528, 6756526367459770368, 3670779101871865856, 5392426358905241600, 9197994745844989952, 1708358456420859904 },
{ 9016798313374023680, 6227435269025431552, 3812750512856498176, 1430675940127539200, 1601294855990935552, 6481647137665843200, 7734495639144235008, 8285347726254669824, 394599278506409984, 1006325083859320832, 2511316752915234816, 8091010643773095936, 2957720732945088512, 7776789693936435200, 1045732942103445504 },
{ 3340221805838204928, 6244165008456941568, 8715616055319330816, 452781551197880320, 3197123429794840576, 8324257510026379264, 8304946645573828608, 7285132027215478784, 4275079733403713536, 2200895882767892480, 3594718160227401728, 2606168060515581952, 5679727643436515328, 8664573006116290560, 4698351749721751552 },
{ 8534133217249198080, 288467101864165376, 3653834287658041344, 588356587647664128, 8487390877713432576, 2593417230326693888, 4113131085200621568, 2352172658226888704, 6551591994341195776, 8806646779056488448, 776027374079705088, 5757266500507402240, 3520806957088768000, 6240992719842312192, 776410798695120896 },
{ 2055296371174408192, 6914532377419055104, 6520975732288520192, 6848624691217694720, 3445339511205134336, 8437282778466222080, 6834059245936181248, 4855402168112381952, 7873885822028611584, 1262391755601346560, 2337181259563794432, 8703966493399842816, 6782868501397766144, 7822780985426051072, 7362674483468959744 },
{ 7787726776616091648, 6483354288381755392, 4750270774684680192, 3788551438750187520, 6060852123476688896, 8518465971122339840, 8974240865417428992, 2237925475886301184, 6976474378582097920, 639275108568924160, 9106796505498386432, 7626395834904477696, 9048396838742261760, 7941077020551675904, 2464834160116629504 },
{ 3756049935162671104, 3244949595737817088, 1683669846237118464, 998681463706615808, 2088590158789083136, 4201709180748300288, 7855442240322142208, 2688554084532748288, 4534532699095826432, 8059395290722992128, 2225115418098401280, 4955812962985050112, 701956067445178368, 1643541305365626880, 3812384740556668928 },
{ 6729066936434425856, 5742578738852265984, 6768946515231637504, 8488905381966249984, 8778654797856243712, 7601709093031510016, 6351976212369244160, 364135917289472000, 6829937756664233984, 9068291883171577856, 4632394070101065728, 8962712193942421504, 983430709148385280, 7914415572975091712, 5888393247918653440 },
{ 6139111461311479808, 4121323151202189312, 2101467372685623296, 2737289765635227648, 3402588274324144128, 2483930907564572672, 6267742089694412800, 6445737891061563392, 6560793639650328576, 6833238932952449024, 4961819801166020608, 2967938417192599552, 2690256605273915392, 2003874209503117312, 6181651295607193600 }
	};
	U64 tmpW[15][15] = 
	{
{ 1876727041349386240, 9223372036854775808, 3749488251631566848, 2910359295348441088, 9152810925386891264, 2310290452143669248, 9050176986722336768, 6823568732481126400, 1506706078266556416, 406158010457522176, 2602490696631844864, 3697326183059292160, 8224983751910752256, 3766263741054713856, 3637124167637139456 },
{ 3378062937322160128, 6776791169918566400, 3241378167222435840, 945093208294031360, 1861554837448032256, 1737243348437041152, 504294809125519360, 2091462418168283136, 6406893523936739328, 9009238097191239680, 1266992262575816704, 5478957460154744832, 7129068532179927040, 2200408519943913472, 4847826472867463168 },
{ 8629574249629089792, 3192180794315505664, 6629311257218383872, 1622133564864724992, 6080170078920245248, 984116091439546368, 7944690926293614592, 2818522023997734912, 430556478420549632, 1913416846720106496, 7654099997461315584, 7565199775071469568, 8202674429054943232, 2078893844916600832, 1198949904613900288 },
{ 1199256960415825920, 4497934290629165056, 1260641071096922112, 5219401346528051200, 1502578189493338112, 3987429409765195776, 5062433473113882624, 1866940597588197376, 8901782675484835840, 1815782735319400448, 1645822998151692288, 5409596315304722432, 2273069647081242624, 4810094665481060352, 7205516059535736832 },
{ 4944945596214542336, 3247230330746175488, 1456050890380148736, 3707533443421175808, 5696065905188929536, 3896792461514637312, 7828400847053651968, 5517477965270614016, 7767631225933529088, 3604212404478541824, 3413897610409279488, 4750518645837266944, 1407192085450194944, 3066900111574433792, 126333387815256064 },
{ 4770105388924141568, 8320464267924996096, 3863704432898211840, 183776363491098624, 7108741478465142784, 575229492553842688, 8799123881844539392, 4862587373520683008, 4061203569087348736, 318060212512620544, 7351915564622675968, 4727839195584790528, 7258435498346020864, 2840152308229079040, 2410725547941298176 },
{ 6927253190081511424, 4654327909735989248, 4112351402607509504, 6348523939131555840, 7934371451321188352, 5303955628950028288, 8688867810748661760, 4514699326101913600, 6019038087114391552, 3679688917038137344, 2590482723986472960, 2381343401791455232, 1897063814575161344, 1677073910341828608, 3356872977432969216 },
{ 7367651023420129280, 8927546410472046592, 7257685854754177024, 3581950515241549824, 5529132509352165376, 3884571213678247936, 8864260737380384768, 9212908616053424128, 79506222675394560, 4395724050488360960, 5358141773874987008, 2664571382288875520, 7484782057256648704, 137075710907908096, 820844644848893952 },
{ 8692337843676119040, 2079595835846295552, 9134931779692527616, 4863024760105205760, 371340024848842752, 1236599106894299136, 6146235205737775104, 199300565732163584, 4815858709160787968, 2183848560569614336, 5745333363372195840, 4903908858738507776, 1862085884384378880, 7975472295479083008, 5402420455745257472 },
{ 3525767541236432896, 1501631011765616640, 1651346231605067776, 8849669762813263872, 5629118776772395008, 5870965610661281792, 339426931780878336, 4326530551096803328, 9200662779529265152, 5859629267821789184, 3780685206147563520, 5026031039709970432, 509475841059586048, 7593595556211982336, 836712517488082944 },
{ 584656636530917376, 2537079122102845440, 6631309499342782464, 6773085850092699648, 1254077454830534656, 2781697584287186944, 999020980871364608, 4900746994009505792, 1943584465078976512, 7328295666856230912, 948152745427206144, 8790464832638812160, 9223136702711726080, 2488934299651276800, 2305556238542307328 },
{ 6635544637744349184, 3827414295709220864, 4723242743059447808, 6058663678725586944, 2580193846361063424, 4560735633143758848, 7965613691972354048, 9198984521058353152, 2525636457347940352, 2526506712211390464, 964892818550030336, 6480109835726618624, 6791704507551055872, 6023728092617375744, 8939430572095176704 },
{ 9018644131404054528, 7696593136872587264, 648883925367652352, 1000160603198717952, 6001481437629382656, 7344781387720818688, 5156194516151042048, 7685953575167459328, 3209833350420234240, 7505919468220973056, 3918333706778968064, 2796941406768201728, 3415185344683835392, 460463826056249344, 3072627716751622144 },
{ 4496495876016963584, 4438426857318121472, 5080210853853134848, 8893958271568707584, 1816176472151293952, 2472010045445898240, 2997181780064206848, 8068404293863997440, 381005419251761152, 2341313494843916288, 3857891834613202944, 1509959249705304064, 5237789128019410944, 3975459078213206016, 1969322859759140864 },
{ 9144345471832031232, 3869146130692440064, 2485613851844804608, 371859372294275072, 51869259176869888, 4279729357624180736, 8402231546068598784, 1863838037767618560, 3248921748996882432, 8960977838903656448, 5434349856804044800, 8461676474720583680, 2098464408861671424, 624546222601928704, 4432562332878503936 }
	};

	for(int i=0;i<_size;++i)
		for (int j = 0; j < _size; ++j)
			HashOfB[i][j] = tmpB[i][j], HashOfW[i][j] = tmpW[i][j];	

	/*std::ifstream in("map.txt", std::ios::binary);
	if (in.is_open())
	{
		U64 tmpK;
		HASHE tmpH;
		while (!in.eof())
		{
			in.read((char*)&tmpK, sizeof(U64));
			in.read((char*)&tmpH, sizeof(HASHE));
			hash.insert(std::pair<U64, HASHE>(tmpK, tmpH));
		}
	}
	in.close();*/

	_ZobristKey = 0;
	_Cnt = 0;
}

MyBoard::~MyBoard()
{
	/*std::ofstream out("map.txt", std::ios::binary);
	auto iter = hash.begin();
	while (iter != hash.end()) 
	{
		out.write((char*)&iter->first, sizeof(U64));
		out.write((char*)&iter->second, sizeof(HASHE));
		iter++;
	}
	out.close();*/
}

bool MyBoard::Set(vec pos, Status color)
{
	int i = pos.first, j = pos.second;
	if (i<0 || j<0 || i>_size - 1 || j>_size - 1 || _board[i][j] != blank) return false;
	_board[i][j] = color;
	_ZobristKey ^= (color == black) ? HashOfB[i][j] : HashOfW[i][j];
	if (Record.size() == 2) Record.pop();
	Record.push(pos);
	++_Cnt;
	return true;
}

void MyBoard::tmpSet(vec pos, Status color)
{
	int i = pos.first, j = pos.second;
	_board[i][j] = color;
	_ZobristKey ^= (color == black) ? HashOfB[i][j] : HashOfW[i][j];
}

void MyBoard::UnSet(vec pos)
{
	int i = pos.first, j = pos.second;
	_ZobristKey ^= (_board[i][j] == black) ? HashOfB[i][j] : HashOfW[i][j];
	_board[i][j] = blank;
}

Status & MyBoard::Get(vec pos)
{
	int i = pos.first, j = pos.second;
	if (i<0 || j<0 || i>_size - 1 || j>_size - 1) throw "out of range";
	return _board[i][j];
}

bool MyBoard::UnDo()
{
	if (Record.empty()) 
	{
		AfxMessageBox(_T("Please don't undo continuously!"));
		return false;
	}
	UnSet(Record.front());
	Record.pop();
	if (Record.empty())
	{
		AfxMessageBox(_T("Please don't undo continuously!"));
		return false;
	}
	UnSet(Record.front());
	Record.pop();
	_Cnt -= 2;
	if(_Cnt<0) _Cnt = 0;
	return true;
}

void MyBoard::Clear()
{
	for (int i = 0; i < _size; ++i)
		for (int j = 0; j < _size; ++j)
			_board[i][j] = blank;
	_ZobristKey = 0;
	_Cnt = 0;
	while(!Record.empty()) Record.pop();
}

long long MyBoard::ProbeHash(int depth, long long alpha, long long beta)
{
	HASHE *phashe = &hash[ZobristKey()];
	if (phashe->depth >= depth)
	{
		if (phashe->flags == hashfEXACT)
			return phashe->value;
		if ((phashe->flags == hashfALPHA) && (phashe->value <= alpha))
			return alpha;
		if ((phashe->flags == hashfBETA) && (phashe->value >= beta))
			return beta;
	}
	return valUNKNOWN;
}

void MyBoard::RecordHash(int depth, long long val, int hashf) 
{
	HASHE *phashe = &hash[ZobristKey()];
	if (phashe->flags != hashfEMPTY && phashe->depth > depth) return;
	phashe->value = val;
	phashe->flags = hashf;
	phashe->depth = depth;
}
// ====== MyBoard类部分结束

// ====== Judge类部分
int Judge::Check(const vec &lastest)
{
	Itr.SetCurrPos(lastest);
	Status CurColor(*Itr);		//得到当前位置状态标记
	int MaxSeq(0);						//记录最大连子数

	for (; +Itr; ++Itr)	//往前检索
		if (*Itr == CurColor && ++MaxSeq <= 5);
		else break;

		Itr.SetCurrPos(lastest);
		for (; +Itr; --Itr)	//往后检索
			if (*Itr == CurColor && ++MaxSeq <= 5);
			else break;

			return MaxSeq - 1;
}

bool Judge::operator()(const vec &lastest)
{
	if (self -> Cnt() == 15 * 15) return 1;
	int MaxSeq(0);			//记录最大连子数
	for (int i = 1; i <= 4; ++i)		//分别调用四种迭代器对当前位置周围进行检查
	{
		Itr.SetTypeOfItr(BoardIterator::TypeOfItr(i));
		MaxSeq = max(MaxSeq, Check(lastest));	//记录当前位置周围连子最长的长度
	}
	return (MaxSeq < 5) ? 0 : 1;
}
// ====== Judge类部分结束